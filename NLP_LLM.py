# -*- coding: utf-8 -*-
"""BigDataNLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pbk-6ADhhtQ7-judJUB8v5kWQtNSvg6p
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install requests
!pip install beautifulsoup4
!pip install pdfplumber
!pip install PyPDF2

import requests
from bs4 import BeautifulSoup
import re
import pdfplumber
import os
import datetime

# ----------------------------------------------------
# pdf 파일 다운로드 후 내용 추출
# ----------------------------------------------------
def extract_text_from_pdf_url(url, pdf_path):
    # PDF 파일을 URL에서 다운로드
    #pdf_path = "downloaded_pdf_file.pdf"  # 임시 저장 경로
    response = requests.get(url)

    # PDF 파일을 로컬에 저장
    with open(pdf_path, "wb") as file:
        file.write(response.content)

    # PDF 파일을 열어서 텍스트 추출
    extracted_text = ""
    #try:
    with pdfplumber.open(pdf_path) as pdf:
        for page_number, page in enumerate(pdf.pages, start=1):
            extracted_text += f"Page {page_number}:\n"
            extracted_text += page.extract_text() + "\n\n"
    #finally:
        # PDF 파일 삭제
        #if os.path.exists(pdf_path):
        #    os.remove(pdf_path)

    return extracted_text

# ----------------------------------------------------
# pdf 다운로드 URL 찾기
# ----------------------------------------------------
def get_pdf_url(url, printflag):
    # HTTP 요청을 보내고 응답 받기
    response = requests.get(url)

    if printflag:
        print(response.text)
    # pdb.set_trace()

    # 결과를 저장할 배열
    pdf_url = ""

    # 응답의 상태 코드 확인 (200번대면 정상)
    if response.status_code == 200:
        # HTML 파싱
        soup = BeautifulSoup(response.text, 'html.parser')
        # print(soup.text)

        # a 태그의 텍스트가 "주간기술동향"을 포함한 경우와 onclick 속성에서 링크 추출
        titles = soup.find_all('a', href=True)
        # print(titles)
        attr = ""

        for title in titles:

            title_text = title.get_text(strip=True)
            attr = title.get('href', '')

            # a 태그의 텍스트에 "pdf"이 포함된 경우
            if ".pdf" in attr:
                pdf_url = attr

    else:
        print(f"페이지를 불러오지 못했습니다. 상태 코드: {response.status_code}")

    # 필터링된 링크 배열 반환
    return pdf_url

# ----------------------------------------------------
# 상세 페이지 URL 리스트 생성
# ----------------------------------------------------
def get_link_list(url, printflag):
    # HTTP 요청을 보내고 응답 받기
    response = requests.get(url)
    response.raise_for_status()  # 상태 코드가 200이 아니면 예외 발생

    if printflag:
        print(response.text)

    # 결과를 저장할 배열
    links = []

    # 응답의 상태 코드 확인 (200번대면 정상)
    if response.status_code == 200:
        # HTML 파싱
        soup = BeautifulSoup(response.text, 'html.parser')
        # print(soup.text)

        # a 태그의 텍스트가 "주간기술동향"을 포함한 경우와 onclick 속성에서 링크 추출
        titles = soup.find_all('a', href=True)

        for title in titles:
            title_text = title.get_text(strip=True)
            onclick_attr = title.get('onclick', '')
            # print(title_text)

            # a 태그의 텍스트에 "주간기술동향"이 포함된 경우
            if "주간기술동향" in title_text and "periodicalViewA.it?" in onclick_attr:
                # print(title_text)
                # print(onclick_attr)
                extracted_url = "https://www.iitp.kr/kr/1/knowledge" + onclick_attr.replace("post_to_url( \".",
                                                                                            "").replace("\",\"post\");",
                                                                                                        "")
                # 발행일 추출
                # a 태그의 상위 td 태그의 다음 td에서 발행일 추출
                parent_td = title.find_parent('td')
                if parent_td:
                    date_match = re.search(r"\d{4}-\d{2}-\d{2}", parent_td.get_text(strip=True))
                    if date_match:
                        date_text = date_match.group()
                        try:
                            publish_date = datetime.datetime.strptime(date_text, "%Y-%m-%d").strftime("%Y%m%d")
                        except ValueError:
                            publish_date = '날짜 없음'
                    else:
                        publish_date = '날짜 없음'
                else:
                    publish_date = '날짜 없음'

                # 링크와 날짜를 배열로 추가
                links.append([extracted_url, publish_date])

    else:
        print(f"페이지를 불러오지 못했습니다. 상태 코드: {response.status_code}")

    # 필터링된 링크 배열 반환
    return links

# 주간기술동향
#url = "https://www.iitp.kr/kr/1/knowledge/periodicalListA.it?masterCode=publication&searClassCode=B_ITA_01"
url = "https://www.iitp.kr/kr/1/knowledge/periodicalListA.it?page=2&pageSize=20&searClassCode=B_ITA_01&currentPage=3"
# 각 페이지
# https://www.iitp.kr/kr/1/knowledge/periodicalViewA.it?searClassCode=B_ITA_01&masterCode=publication&identifier=1335
links = get_link_list(url, False)
# print(links)
print("START!!! #################################################################")

pdf_data_list = []
# 결과 출력
for i, link in enumerate(links):
    pdf_url = get_pdf_url(link[0], False)
    #save_file_name = "./PDF_Files/"+str(i)+".pdf"
    #save_file_name = "./PDF_Files/" + link[1] + ".pdf"
    save_file_name = "/content/drive/MyDrive/Text Summariza/data/01.BEFORE/" + link[1] + ".pdf"
    pdf_data_list.append(extract_text_from_pdf_url(pdf_url, save_file_name))
    # print(pdf_url)
print("File Count:"+str(i))
print("END!!! #################################################################")
# print(pdf_data_list[0])



# Commented out IPython magic to ensure Python compatibility.
#필요한 라이브러리 임포트
# %pip install llama-index
# %pip install utils
# %pip install llama-index-embeddings-openai
# %pip install llama-index-llms-openai

from google.colab import userdata
import os

# os.environ["OPENAI_API_KEY"] = userdata.get('study')
os.environ["OPENAI_API_KEY"] = "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"

#이미 실행 중인 이벤트 루프가 있는 환경에서 asyncio를 중첩하여 사용할 수 있도록 함
#특히 Jupyter 노트북과 같이 이벤트 루프가 이미 실행 중인 환경에서 비동기 코드를 실행할 때 유용
import nest_asyncio

nest_asyncio.apply()

import os
import pandas as pd
from llama_index.core import SimpleDirectoryReader
from llama_index.core.node_parser import SentenceSplitter
from llama_index.llms.openai import OpenAI
from llama_index.embeddings.openai import OpenAIEmbedding
from llama_index.core import SummaryIndex

# 폴더 안의 모든 문서를 순차적으로 요약하는 함수
def summarize_documents_in_folder(folder_path: str, output_csv: str, file_count: int = None, llm=None, embed_model=None):
    # LLM (Large Language Model) 설정 (기본값 : OpenAI의 gpt-3.5-turbo 모델)
    llm = llm or OpenAI(model="gpt-3.5-turbo")

    # 임베딩 모델 설정 (기본값: OpenAI의 text-embedding-ada-002 모델)
    embed_model = embed_model or OpenAIEmbedding(model="text-embedding-ada-002")

    # 요약 결과를 저장할 리스트 (각 문서의 순번, 파일 경로, 원문, 요약문)
    summary_data = []

    # 폴더 내 모든 파일 경로 가져오기
    file_paths = [os.path.join(folder_path, file_name) for file_name in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, file_name))]

    # file_count가 지정되지 않은 경우 모든 파일 사용
    if file_count is not None:
        file_paths = file_paths[:file_count]

    # 각 파일에 대해 요약 수행
    for index, file_path in enumerate(file_paths, start=1):  # 순번을 가져오기 위해 enumerate 사용, start=1로 설정해 1부터 시작
        # 문서 로드
        documents = SimpleDirectoryReader(input_files=[file_path]).load_data()

        # 문서 청크 분할
        splitter = SentenceSplitter(chunk_size=1024)
        nodes = splitter.get_nodes_from_documents(documents)

        # 요약 인덱스 생성
        summary_index = SummaryIndex(nodes)

        # 요약 쿼리 엔진 생성
        summary_query_engine = summary_index.as_query_engine(
            response_mode="tree_summarize",
            use_async=True,
            llm=llm
        )

        # 문서 요약 실행
        # summary = summary_query_engine.query("이 문서를 100자 이내로 문어체를 이용해서 한글로 요약")
        summary = summary_query_engine.query("이 문서를 한글로 요약")

        # 원문 텍스트 가져오기
        original_text = " ".join([node.get_content() for node in nodes])

        # 요약 결과를 리스트에 추가
        summary_data.append({
            "id": index,
            #"file_path": file_path,
            "dialogue": original_text,
            "summary": summary
        })

    # 데이터프레임 생성 및 CSV로 저장
    summary_df = pd.DataFrame(summary_data)
    summary_df.to_csv(output_csv, index=False, encoding='utf-8-sig')

    print(f"Summaries saved to {output_csv}")

# 사용 예시
folder_path = "/content/drive/MyDrive/Text Summariza/data/03.AFTER"  # 요약할 문서들이 있는 폴더 경로
output_csv = "/content/drive/MyDrive/Text Summariza/data/04.SUMMARY/summarized_documents.csv"  # 저장할 CSV 파일 경로
#summarize_documents_in_folder(folder_path, output_csv, 1)
summarize_documents_in_folder(folder_path, output_csv)



!pip install pymupdf

import fitz  # PyMuPDF 라이브러리
from datetime import datetime
import os
import re

def pdf_to_text_with_titles(pdf_path, txt_path):
    # 현재 날짜를 파일 이름으로 설정
    # current_date = datetime.now().strftime("%Y%m%d")
    # pdf_path = f"/content/drive/MyDrive/Text Summariza/data/01.BEFORE/{current_date}.pdf"
    # txt_path = f"/content/drive/MyDrive/Text Summariza/data/01.BEFORE/{current_date}.txt"

    # PDF 파일 열기
    pdf_document = fitz.open(pdf_path)

    # 텍스트 파일 생성 (쓰기 모드)
    with open(txt_path, 'w', encoding='utf-8') as txt_file:
        title_text = ""        # 대제목을 저장할 변수
        chapter_num = ""       # Chapter 번호를 저장할 변수
        in_title_section = False  # 현재 대제목을 작성 중인지 여부

        for page_num in range(pdf_document.page_count):
            # 각 페이지의 텍스트 블록 추출
            page = pdf_document[page_num]
            text_instances = page.get_text("dict")["blocks"]

            for block in text_instances:
                if "lines" in block:
                    for line in block["lines"]:
                        for span in line["spans"]:
                            font_size = span["size"]
                            text = span["text"].strip()

                            # 폰트 크기가 19 이상인 텍스트는 대제목으로 간주하여 title_text에 누적
                            if font_size >= 19:
                                title_text += text.replace(" ", "") + " "  # 불필요한 공백 제거 후 결합
                                in_title_section = True  # 대제목 상태로 전환

                            # "Chapter" 키워드 발견 시 다음 텍스트가 번호일 가능성 처리
                            elif text == "Chapter":
                                #print(f"\n[디버깅] Chapter 앞 텍스트: {title_text.strip()} (폰트 크기: {font_size})")
                                if in_title_section:
                                    chapter_num = ""  # Chapter 번호 초기화

                            # 숫자 형태의 텍스트가 대제목 상태에서 첫 등장 시 이를 Chapter 번호로 저장
                            elif text.isdigit() and in_title_section and not chapter_num:
                                chapter_num = title_text[-3:]  # Chapter 번호 추출
                                #print(f"[디버깅] Chapter 번호: {chapter_num}")

                            # "Chapter 번호 대제목" 형식으로 텍스트 파일에 저장
                            elif in_title_section and title_text and chapter_num:
                                # 포맷: "Chapter 번호 대제목"
                                title_text = title_text[:-3]
                                txt_file.write(f"Chapter {chapter_num} {title_text.strip()}\n")
                                #print(f"Chapter {chapter_num} {title_text.strip()}")

                                # 변수 초기화
                                title_text = ""
                                chapter_num = ""
                                in_title_section = False  # 대제목 상태 종료

                            # 일반 텍스트는 그대로 파일에 저장
                            else:
                                txt_file.write(text + " ")
                        txt_file.write("\n")  # 각 줄 구분
            txt_file.write("\n\n")  # 각 페이지 구분

    pdf_document.close()
    print(f"PDF 텍스트와 정리된 대제목이 {txt_path}에 저장되었습니다.")

def process_pdf_to_text_with_titles(folder_path, output_folder, file_count=None):
    # 폴더 안의 모든 파일 목록을 가져옵니다.
    files = os.listdir(folder_path)
    # PDF 파일만 필터링
    pdf_files = [f for f in files if f.lower().endswith('.pdf')]

    # 처리할 파일 개수가 지정된 경우 해당 개수만큼 파일을 선택합니다.
    if file_count is not None:
        pdf_files = pdf_files[:file_count]

    # PDF 파일을 순차적으로 처리합니다.
    for pdf_file in pdf_files:
        # PDF 파일 경로 생성
        pdf_path = os.path.join(folder_path, pdf_file)

        # 출력 텍스트 파일 경로 생성
        txt_file = os.path.basename(pdf_file).replace('.pdf', '.txt')
        txt_path = os.path.join(output_folder, txt_file)

        # pdf_to_text_with_titles 함수 호출
        pdf_to_text_with_titles(pdf_path, txt_path)
        print(f"Processed {pdf_file} to {txt_path}")

# 테스트: 1개 파일 처리
# pdf_folder = "/content/drive/MyDrive/Text Summariza/data/01.BEFORE"
# txt_folder = "/content/drive/MyDrive/Text Summariza/data/02.ING"
# process_pdf_to_text_with_titles(pdf_folder, txt_folder, file_count=1)

def split_and_save_chapters(txt_file_path, save_dir):
    # 저장 경로 설정
    #save_dir = "/content/drive/MyDrive/Text Summariza/data/02.AFTER/"
    if not os.path.exists(save_dir):
        os.makedirs(save_dir)

    # txt 파일 읽기
    with open(txt_file_path, 'r', encoding='utf-8') as file:
        content = file.read()

    # txt_file_path에서 파일명 추출 (확장자 제거)
    base_name = os.path.splitext(os.path.basename(txt_file_path))[0]

    # Chapter 기준으로 분할
    chapters = content.split("Chapter ")[1:]  # "Chapter 0"을 제외한 나머지 분할

    for chapter in chapters:
        lines = chapter.splitlines()
        if len(lines) > 0:
            chapter_title_line = lines[0]
            # Chapter 번호와 제목 분리
            chapter_num = chapter_title_line.split()[0]
            if "0" not in str(chapter_num):
                continue
            chapter_title = ' '.join(chapter_title_line.split()[1:]).replace(" ", "")  # 제목의 공백 제거

            # 제목에서 파일명에 적합하지 않은 문자 및 슬래시 제거
            chapter_title = re.sub(r'[<>:"/\\|?*]', '', chapter_title)

            # 파일명으로 사용하기 위한 유효한 이름 형식으로 변환
            file_name = f"{base_name}_{chapter_num}_{chapter_title}.txt"
            file_path = os.path.join(save_dir, file_name)

            # 챕터 내용 추출
            chapter_content = "Chapter " + chapter.strip()  # 앞에 "Chapter " 추가

            # 챕터별 파일로 저장
            with open(file_path, 'w', encoding='utf-8') as chapter_file:
                chapter_file.write(chapter_content)

            print(f"{file_path} 저장 완료.")

# 테스트: 1개 파일 처리
# save_dir = "/content/drive/MyDrive/Text Summariza/data/03.AFTER"
# txt_file_path = "/content/drive/MyDrive/Text Summariza/data/02.ING/20240731.txt"
# split_and_save_chapters(txt_file_path, save_dir)

def process_split_and_save_chapters(input_folder, output_folder, file_count=None):
    # 폴더 안의 모든 파일 목록을 가져옵니다.
    files = os.listdir(input_folder)
    # TXT 파일만 필터링
    txt_files = [f for f in files if f.lower().endswith('.txt')]

    # 처리할 파일 개수가 지정된 경우 해당 개수만큼 파일을 선택합니다.
    if file_count is not None:
        txt_files = txt_files[:file_count]

    # TXT 파일을 순차적으로 처리합니다.
    for txt_file in txt_files:
        # TXT 파일 경로 생성
        txt_file_path = os.path.join(input_folder, txt_file)

        # pdf_to_text_with_titles 함수 호출
        split_and_save_chapters(txt_file_path, output_folder)
        print(f"Processed {txt_file_path} to {output_folder}")

# 테스트: 1개 파일 처리
#input_path = "/content/drive/MyDrive/Text Summariza/data/02.ING"
#output_path = "/content/drive/MyDrive/Text Summariza/data/03.AFTER"
#process_split_and_save_chapters(input_path, output_path, file_count=1)

print("START ================ process_pdf_to_text_with_titles ================")
pdf_folder = "/content/drive/MyDrive/Text Summariza/data/01.BEFORE"
txt_folder = "/content/drive/MyDrive/Text Summariza/data/02.ING"
#process_pdf_to_text_with_titles(pdf_folder, txt_folder, file_count=1)
process_pdf_to_text_with_titles(pdf_folder, txt_folder)
print("END!! ================ process_pdf_to_text_with_titles ================")

print("=======================================================================")
print("START ================ process_split_and_save_chapters ================")
input_path = "/content/drive/MyDrive/Text Summariza/data/02.ING"
output_path = "/content/drive/MyDrive/Text Summariza/data/03.AFTER"
#process_split_and_save_chapters(input_path, output_path, file_count=1)
process_split_and_save_chapters(input_path, output_path)
print("END!! ================ process_split_and_save_chapters ================")



# Mecab 설치를 위한 필수 라이브러리 설치
!apt-get update
!apt-get install -y g++ openjdk-8-jdk python3-dev python3-pip curl

!pip install mecab-python3

# 폰트 설치
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

!pip install sklearn
!apt-get install -y fonts-nanum

# import os
# os.kill(os.getpid(), 9)

!pip install konlpy

!apt-get update
!apt-get install -y mecab mecab-ipadic-utf8 mecab-ko mecab-ko-dic
!pip install mecab-python3

# Commented out IPython magic to ensure Python compatibility.
import os
import sys
import warnings
import numpy as np
import pandas as pd
import json

import nltk
from konlpy.tag import Okt
import MeCab
import pandas as pd
import re
nltk.download('punkt')

# Okt 객체 생성
okt = Okt()
# MeCab Tokenizer 객체 생성
# tokenizer = MeCab.Tagger()

import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
sns.set(style='white', context='notebook', palette='deep')

# 나눔 폰트 적용
import matplotlib.pyplot as plt
plt.rcParams['font.family'] = 'NanumBarunGothic'

from sklearn.feature_extraction.text import TfidfVectorizer
import itertools

# warnings.filterwarnings(action='ignore')

if get_ipython():
    print("jupyter envirionment")
    PROJECT_DIR = os.path.abspath(os.path.join(os.path.dirname('__file__'), '..'))
    from tqdm import tqdm_notebook as tqdm  # 이거 안해주면 한 줄씩 출력됨 ;;
else:
    print("command shell envirionment")
    PROJECT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    from tqdm import tqdm

# sys.pathdp PROJECT_DIR 추가
sys.path.insert(0, PROJECT_DIR)



import pandas as pd
import json

file_path = "/content/drive/MyDrive/Text Summariza/data/04.SUMMARY/summarized_documents.csv"

# CSV 파일을 pandas DataFrame으로 읽기
data = pd.read_csv(file_path)

# 데이터 확인
data.head()

data.sample(5)

# id 컬럼 삭제
data = data.drop(columns=['id'])
data.sample(5)

len(data)

nltk.download('stopwords')
from bs4 import BeautifulSoup
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import warnings
warnings.filterwarnings("ignore", category=UserWarning, module='bs4')

# # 영어 불용어
# from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS

# # Google Drive에 저장된 불용어 파일 경로
# stopwords_file_path = '/content/drive/MyDrive/Text Summariza/stopword/stopword.txt'

# # 불용어 파일 읽기
# with open(stopwords_file_path, 'r', encoding='utf-8') as f:
#     final_stopwords = f.read().splitlines()

# # 불용어 리스트에 '내용'과 '동향'을 추가
# # '데이터'
# final_stopwords.extend(['chapter', '자료', '생성', '데이터 데이터', '기대', '효과', '작성', '수행', '자체', '작성', '연구', '그림', 'et al', '기업', '제공', '기술', '동향', '주간', '기획', 'www', 'iitp', '시리즈', '내용', '대해', '포함', '대한', '한다', '해야', '문제', '해결', 'conference', '발전', '2024', '정보', '통신', '다루', '발전', '응용', '분야', '역할', '중요', '활용', '향상'])

# # 불용어 리스트 출력 (확인용)
# print(final_stopwords)

# 불용어 리스트 정의
stopwords = [
    'chapter', '않다', '되어다', '되다', '하다', '어떻다', '이렇다', '이다', '어제', '매일', '아', '휴', '아이구', '아이쿠', '아이고', '어', '나', '우리', '저희', '따라', '의해', '을', '를',
    '에', '의', '가', '으로', '로', '에게', '뿐이다', '의거하여', '근거하여', '입각하여', '기준으로', '예하면', '예를 들면', '예를 들자면', '저', '소인', '소생', '저희', '지말고', '하지마',
    '하지마라', '다른', '물론', '또한', '그리고', '비길수 없다', '해서는 안된다', '뿐만 아니라', '만이 아니다', '만은 아니다', '막론하고', '관계없이', '그치지 않다', '그러나', '그런데', '하지만',
    '든간에', '논하지 않다', '따지지 않다', '설사', '비록', '더라도', '아니면', '만 못하다', '하는 편이 낫다', '불문하고', '향하여', '향해서', '향하다', '쪽으로', '틈타', '이용하여', '타다',
    '오르다', '제외하고', '이 외에', '이 밖에', '하여야', '비로소', '한다면 몰라도', '외에도', '이곳', '여기', '부터', '기점으로', '따라서', '할 생각이다', '하려고하다', '이리하여', '그리하여',
    '그렇게 함으로써', '하지만', '일때', '할때', '앞에서', '중에서', '보는데서', '으로써', '로써', '까지', '해야한다', '일것이다', '반드시', '할줄알다', '할수있다', '할수있어', '임에 틀림없다',
    '한다면', '등', '등등', '제', '겨우', '단지', '다만', '할뿐', '딩동', '댕그', '대해서', '대하여', '대하면', '훨씬', '얼마나', '얼마만큼', '얼마큼', '남짓', '여', '얼마간', '약간', '다소',
    '좀', '조금', '다수', '몇', '얼마', '지만', '하물며', '또한', '그러나', '그렇지만', '하지만', '이외에도', '대해 말하자면', '뿐이다', '다음에', '반대로', '반대로 말하자면', '이와 반대로',
    '바꾸어서 말하면', '바꾸어서 한다면', '만약', '그렇지않으면', '까악', '툭', '딱', '삐걱거리다', '보드득', '비걱거리다', '꽈당', '응당', '해야한다', '에 가서', '각', '각각', '여러분', '각종',
    '각자', '제각기', '하도록하다', '와', '과', '그러므로', '그래서', '고로', '한 까닭에', '하기 때문에', '거니와', '이지만', '대하여', '관하여', '관한', '과연', '실로', '아니나다를가',
    '생각한대로', '진짜로', '한적이있다', '하곤하였다', '하', '하하', '허허', '아하', '거바', '와', '오', '왜', '어째서', '무엇때문에', '어찌', '하겠는가', '무슨', '어디', '어느곳', '더군다나',
    '하물며', '더욱이는', '어느때', '언제', '야', '이봐', '어이', '여보시오', '흐흐', '흥', '휴', '헉헉', '헐떡헐떡', '영차', '여차', '어기여차', '끙끙', '아야', '앗', '아야', '콸콸', '졸졸',
    '좍좍', '뚝뚝', '주룩주룩', '솨', '우르르', '그래도', '또', '그리고', '바꾸어말하면', '바꾸어말하자면', '혹은', '혹시', '답다', '및', '그에 따르는', '때가 되어', '즉', '지든지', '설령',
    '가령', '하더라도', '할지라도', '일지라도', '지든지', '몇', '거의', '하마터면', '인젠', '이젠', '된바에야', '된이상', '만큼\t어찌됏든', '그위에', '게다가', '점에서 보아', '비추어 보아',
    '고려하면', '하게될것이다', '일것이다', '비교적', '좀', '보다더', '비하면', '시키다', '하게하다', '할만하다', '의해서', '연이서', '이어서', '잇따라', '뒤따라', '뒤이어', '결국', '의지하여',
    '기대여', '통하여', '자마자', '더욱더', '불구하고', '얼마든지', '마음대로', '주저하지 않고', '곧', '즉시', '바로', '당장', '하자마자', '밖에 안된다', '하면된다', '그래', '그렇지', '요컨대',
    '다시 말하자면', '바꿔 말하면', '즉', '구체적으로', '말하자면', '시작하여', '시초에', '이상', '허', '헉', '허걱', '바와같이', '해도좋다', '해도된다', '게다가', '더구나', '하물며', '와르르',
    '팍', '퍽', '펄렁', '동안', '이래', '하고있었다', '이었다', '에서', '로부터', '까지', '예하면', '했어요', '해요', '함께', '같이', '더불어', '마저', '마저도', '양자', '모두', '습니다',
    '가까스로', '하려고하다', '즈음하여', '다른', '다른 방면으로', '해봐요', '습니까', '했어요', '말할것도 없고', '무릎쓰고', '개의치않고', '하는것만 못하다', '하는것이 낫다', '매', '매번', '들',
    '모', '어느것', '어느', '로써', '갖고말하자면', '어디', '어느쪽', '어느것', '어느해', '어느 년도', '라 해도', '언젠가', '어떤것', '어느것', '저기', '저쪽', '저것', '그때', '그럼', '그러면',
    '요만한걸', '그래', '그때', '저것만큼', '그저', '이르기까지', '할 줄 안다', '할 힘이 있다', '너', '너희', '당신', '어찌', '설마', '차라리', '할지언정', '할지라도', '할망정', '할지언정',
    '구토하다', '게우다', '토하다', '메쓰겁다', '옆사람', '퉤', '쳇', '의거하여', '근거하여', '의해', '따라', '힘입어', '그', '다음', '버금', '두번째로', '기타', '첫번째로', '나머지는',
    '그중에서', '견지에서', '형식으로 쓰여', '입장에서', '위해서', '단지', '의해되다', '하도록시키다', '뿐만아니라', '반대로', '전후', '전자', '앞의것', '잠시', '잠깐', '하면서', '그렇지만',
    '다음에', '그러한즉', '그런즉', '남들', '아무거나', '어찌하든지', '같다', '비슷하다', '예컨대', '이럴정도로', '어떻게', '만약', '만일', '위에서 서술한바와같이', '인 듯하다', '하지 않는다면',
    '만약에', '무엇', '무슨', '어느', '어떤', '아래윗', '조차', '한데', '그럼에도 불구하고', '여전히', '심지어', '까지도', '조차도', '하지 않도록', '않기 위하여', '때', '시각', '무렵', '시간',
    '동안', '어때', '어떠한', '하여금', '네', '예', '우선', '누구', '누가 알겠는가', '아무도', '줄은모른다', '줄은 몰랏다', '하는 김에', '겸사겸사', '하는바', '그런 까닭에', '한 이유는', '그러니',
    '그러니까', '때문에', '그', '너희', '그들', '너희들', '타인', '것', '것들', '너', '위하여', '공동으로', '동시에', '하기 위하여', '어찌하여', '무엇때문에', '붕붕', '윙윙', '나', '우리',
    '엉엉', '휘익', '윙윙', '오호', '아하', '어쨋든', '만 못하다\t하기보다는', '차라리', '하는 편이 낫다', '흐흐', '놀라다', '상대적으로 말하자면', '마치', '아니라면', '쉿', '그렇지 않으면',
    '그렇지 않다면', '안 그러면', '아니었다면', '하든지', '아니면', '이라면', '좋아', '알았어', '하는것도', '그만이다', '어쩔수 없다', '하나', '일', '일반적으로', '일단', '한켠으로는', '오자마자',
    '이렇게되면', '이와같다면', '전부', '한마디', '한항목', '근거로', '하기에', '아울러', '하지 않도록', '않기 위해서', '이르기까지', '이 되다', '로 인하여', '까닭으로', '이유만으로', '이로 인하여',
    '그래서', '이 때문에', '그러므로', '그런 까닭에', '알 수 있다', '결론을 낼 수 있다', '으로 인하여', '있다', '어떤것', '관계가 있다', '관련이 있다', '연관되다', '어떤것들', '에 대해', '이리하여',
    '그리하여', '여부', '하기보다는', '하느니', '하면 할수록', '운운', '이러이러하다', '하구나', '하도다', '다시말하면', '다음으로', '에 있다', '에 달려 있다', '우리', '우리들', '오히려',
    '하기는한데', '어떻게', '어떻해', '어찌됏어', '어때', '어째서', '본대로', '자', '이', '이쪽', '여기', '이것', '이번', '이렇게말하자면', '이런', '이러한', '이와 같은', '요만큼', '요만한 것',
    '얼마 안 되는 것', '이만큼', '이 정도의', '이렇게 많은 것', '이와 같다', '이때', '이렇구나', '것과 같이', '끼익', '삐걱', '따위', '와 같은 사람들', '부류의 사람들', '왜냐하면', '중의하나',
    '오직', '오로지', '에 한하다', '하기만 하면', '도착하다', '까지 미치다', '도달하다', '정도에 이르다', '할 지경이다', '결과에 이르다', '관해서는', '여러분', '하고 있다', '한 후', '혼자',
    '자기', '자기집', '자신', '우에 종합한것과같이', '총적으로 보면', '총적으로 말하면', '총적으로', '대로 하다', '으로서', '참', '그만이다', '할 따름이다', '쿵', '탕탕', '쾅쾅', '둥둥', '봐',
    '봐라', '아이야', '아니', '와아', '응', '아이', '참나', '년', '월', '일', '령', '영', '일', '이', '삼', '사', '오', '육', '륙', '칠', '팔', '구', '이천육', '이천칠', '이천팔',
    '이천구', '하나', '둘', '셋', '넷', '다섯', '여섯', '일곱', '여덟', '아홉', '령', '영', '자료', '생성', '데이터 데이터', '기대', '효과', '작성', '수행', '자체', '작성', '연구',
    '그림', 'et al', '기업', '제공', '기술', '동향', '주간', '기획', 'www', 'iitp', '시리즈', '내용', '대해', '포함', '대한', '한다', '해야', '문제', '해결', 'conference', '발전',
    '2024', '정보', '통신', '다루', '발전', '응용', '분야', '역할', '중요', '활용', '향상']

# 불용어 제거를 위한 전처리 예제
import pandas as pd
from konlpy.tag import Okt
from nltk.tokenize import sent_tokenize

# 형태소 분석기
tokenizer = Okt()

def preprocess_text(text):
    # 형태소 분석 후 불용어 제거
    words = tokenizer.morphs(text)
    filtered_words = [word for word in words if word not in stopwords]
    return ' '.join(filtered_words)

print('dialoggue 열에서 중복을 배제한 유일한 샘플의 수 :', data['dialogue'].nunique())
print('summary 열에서 중복을 배제한 유일한 샘플의 수 :', data['summary'].nunique())

print(data.isnull().sum())

data.info()

print('불용어 개수 :', len(stopwords))
print(stopwords)







"""# 텍스트 증강"""

from sklearn.model_selection import LeaveOneOut
import random

# 원본 데이터 불러오기
file_path = '/content/drive/MyDrive/Text Summariza/data/04.SUMMARY/summarized_documents.csv'
data = pd.read_csv(file_path)

# 데이터 개수 확인
print("원본 데이터 개수:", len(data))

# 랜덤 삭제 함수 정의
def random_deletion(text, p=0.3):
    """
    랜덤 삭제 증강 함수.
    입력된 텍스트에서 p 확률로 단어를 삭제하여 증강된 텍스트를 반환.
    """
    words = text.split()
    if len(words) == 1:
        return text
    new_words = [word for word in words if random.uniform(0, 1) > p]
    return ' '.join(new_words) if new_words else words[random.randint(0, len(words) - 1)]

# 증강 데이터 생성
augmented_texts = []
for text in data['dialogue']:  # 'dialogue' 열 사용
    augmented_texts.append(random_deletion(text))  # 랜덤 삭제 적용

# 원본 데이터와 증강 데이터를 하나의 데이터프레임으로 결합
data_augmented = pd.DataFrame({
    'dialogue': data['dialogue'].tolist() + augmented_texts,  # 원문과 증강된 텍스트 결합
    'summary': data['summary'].tolist() + data['summary'].tolist()  # 요약은 그대로 복사
})

# 증강된 데이터 개수 확인
print("증강 후 데이터 개수:", len(data_augmented))

data_augmented.head()

len(data_augmented)

data = data_augmented.copy()

import re
from bs4 import BeautifulSoup
from konlpy.tag import Okt
from string import punctuation

tokenizer = Okt()

# 데이터 전처리 함수
def preprocess_sentence(sentence, remove_stopwords=True):
    sentence = sentence.lower()
    sentence = BeautifulSoup(sentence, "lxml").text
    sentence = re.sub(r'\([^)]*\)', '', sentence)
    sentence = re.sub('"','', sentence)
    sentence = re.sub("[^가-힣a-zA-Z\s]", " ", sentence)

    # URL 제거
    pattern = '(http|ftp|https)://(?:[-\w.]|(?:%[\da-fA-F]{2}))+'
    sentence = re.sub(pattern=pattern, repl='', string=sentence)

    # 기타 특수 문자 제거
    sentence = re.sub('[-=+,#/\?:^$.@*\"※~&%ㆍ!』\\‘|\(\)\[\]\<\>`\'…》]', '', sentence)
    sentence = re.sub('\n', '.', sentence)

    # 영어 소문자와 대문자 삭제
    sentence = re.sub(r'[a-zA-Z]', '', sentence)

    words = tokenizer.morphs(sentence)

    # 불용어 제거
    if remove_stopwords:
        words = ' '.join(word for word in words if word not in stopwords and len(word) > 1)
    else:
        words = ' '.join(word for word in words if len(word) > 1)

    return words

clean_dialogue = []

for s in data['dialogue']:
    clean_dialogue.append(preprocess_sentence(s))

print("dialogue 전처리 후 결과: ", clean_dialogue[:1])

clean_summary = []

for s in data['summary']:
    clean_summary.append(preprocess_sentence(s, False))

print("summary 전처리 후 결과: ", clean_summary[:1])

data['dialogue_sentences'] = clean_dialogue
data['summary_sentences'] = clean_summary

data.replace('', np.nan, inplace=True)
print(data['dialogue_sentences'][0])

data.head()

# 길이 분포 출력
import matplotlib.pyplot as plt

dialogue_len = [len(s.split()) for s in data['dialogue']]
summary_len = [len(s.split()) for s in data['summary']]

print('텍스트의 최소 길이 : {}'.format(np.min(dialogue_len)))
print('텍스트의 최대 길이 : {}'.format(np.max(dialogue_len)))
print('텍스트의 평균 길이 : {}'.format(np.mean(dialogue_len)))
print('요약의 최소 길이 : {}'.format(np.min(summary_len)))
print('요약의 최대 길이 : {}'.format(np.max(summary_len)))
print('요약의 평균 길이 : {}'.format(np.mean(summary_len)))

plt.subplot(1,2,1)
plt.boxplot(dialogue_len)
plt.title('dialogue')
plt.subplot(1,2,2)
plt.boxplot(summary_len)
plt.title('summary')
plt.tight_layout()
plt.show()

dialogue_max_len = 4000
summary_max_len = 80

def below_threshold_len(max_len, nested_list):
  cnt = 0
  for s in nested_list:
    if(len(s.split()) <= max_len):
        cnt = cnt + 1
  print('전체 샘플 중 길이가 %s 이하인 샘플의 비율: %s'%(max_len, (cnt / len(nested_list))))

below_threshold_len(dialogue_max_len, data['dialogue'])
below_threshold_len(summary_max_len,  data['summary'])

data = data[data['dialogue'].apply(lambda x: len(x.split()) <= dialogue_max_len)]
data = data[data['summary'].apply(lambda x: len(x.split()) <= summary_max_len)]
print('전체 샘플수 :', (len(data)))

# summary 데이터에 시작 토큰과 종료 토큰을 추가
data['decoder_input'] = data['summary'].apply(lambda x : 'sostoken '+ x)
data['decoder_target'] = data['summary'].apply(lambda x : x + ' eostoken')
data.head()

encoder_input = np.array(data['dialogue_sentences'])
decoder_input = np.array(data['decoder_input'])
decoder_target = np.array(data['decoder_target'])

indices = np.arange(encoder_input.shape[0])
np.random.shuffle(indices)
print(indices)

encoder_input = encoder_input[indices]
decoder_input = decoder_input[indices]
decoder_target = decoder_target[indices]

n_of_val = int(len(encoder_input)*0.2)
print('테스트 데이터의 수 :', n_of_val)

encoder_input_train = encoder_input[:-n_of_val]
decoder_input_train = decoder_input[:-n_of_val]
decoder_target_train = decoder_target[:-n_of_val]

encoder_input_test = encoder_input[-n_of_val:]
decoder_input_test = decoder_input[-n_of_val:]
decoder_target_test = decoder_target[-n_of_val:]

src_tokenizer = Tokenizer()
src_tokenizer.fit_on_texts(encoder_input_train)

threshold = 2
total_cnt = len(src_tokenizer.word_index)
rare_cnt = 0
total_freq = 0
rare_freq = 0

for key, value in src_tokenizer.word_counts.items():
    total_freq = total_freq + value

    if(value < threshold):
        rare_cnt = rare_cnt + 1
        rare_freq = rare_freq + value

print('단어 집합의 크기 :', total_cnt)
print('등장 빈도가 %s번 이하인 희귀 단어의 수: %s'%(threshold - 1, rare_cnt))
print('단어 집합에서 희귀 단어를 제외시킬 경우의 단어 집합의 크기 %s'%(total_cnt - rare_cnt))
print("단어 집합에서 희귀 단어의 비율:", (rare_cnt / total_cnt)*100)

src_vocab = 10000
src_tokenizer = Tokenizer(num_words=src_vocab)
src_tokenizer.fit_on_texts(encoder_input_train)

# 텍스트 시퀀스를 정수 시퀀스로 변환
encoder_input_train = src_tokenizer.texts_to_sequences(encoder_input_train)
encoder_input_test = src_tokenizer.texts_to_sequences(encoder_input_test)

print(encoder_input_train[:3])

tar_tokenizer = Tokenizer()
tar_tokenizer.fit_on_texts(decoder_input_train)

threshold = 2
total_cnt = len(tar_tokenizer.word_index)
rare_cnt = 0
total_freq = 0
rare_freq = 0

for key, value in tar_tokenizer.word_counts.items():
    total_freq = total_freq + value

    if(value < threshold):
        rare_cnt = rare_cnt + 1
        rare_freq = rare_freq + value

print('단어 집합의 크기 :', total_cnt)
print('등장 빈도가 %s번 이하인 희귀 단어의 수: %s'%(threshold - 1, rare_cnt))
print('단어 집합에서 희귀 단어를 제외시킬 경우의 단어 집합의 크기 %s'%(total_cnt - rare_cnt))
print("단어 집합에서 희귀 단어의 비율:", (rare_cnt / total_cnt)*100)

tar_vocab = 2000
tar_tokenizer = Tokenizer(num_words=tar_vocab)
tar_tokenizer.fit_on_texts(decoder_input_train)
tar_tokenizer.fit_on_texts(decoder_target_train)

decoder_input_train = tar_tokenizer.texts_to_sequences(decoder_input_train)
decoder_target_train = tar_tokenizer.texts_to_sequences(decoder_target_train)
decoder_input_test = tar_tokenizer.texts_to_sequences(decoder_input_test)
decoder_target_test = tar_tokenizer.texts_to_sequences(decoder_target_test)

print('input ',decoder_input_train[:5])
print('decoder ',decoder_target_train[:5])

"""### 패딩하기"""

encoder_input_train = pad_sequences(encoder_input_train, maxlen=dialogue_max_len, padding='post')
encoder_input_test = pad_sequences(encoder_input_test, maxlen=dialogue_max_len, padding='post')
decoder_input_train = pad_sequences(decoder_input_train, maxlen=summary_max_len, padding='post')
decoder_target_train = pad_sequences(decoder_target_train, maxlen=summary_max_len, padding='post')
decoder_input_test = pad_sequences(decoder_input_test, maxlen=summary_max_len, padding='post')
decoder_target_test = pad_sequences(decoder_target_test, maxlen=summary_max_len, padding='post')

"""# 모델 설계하기"""

from tensorflow.keras.layers import Input, LSTM, Embedding, Dense, Concatenate, TimeDistributed
from tensorflow.keras.models import Model
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

# 인코더
embedding_dim = 128
hidden_size = 256
encoder_inputs = Input(shape=(dialogue_max_len,))
enc_emb = Embedding(src_vocab, embedding_dim)(encoder_inputs)
encoder_lstm1 = LSTM(hidden_size, return_sequences=True, return_state=True ,dropout = 0.4)
encoder_output1, state_h1, state_c1 = encoder_lstm1(enc_emb)
encoder_lstm2 = LSTM(hidden_size, return_sequences=True, return_state=True, dropout=0.4)
encoder_output2, state_h2, state_c2 = encoder_lstm2(encoder_output1)
encoder_lstm3 = LSTM(hidden_size, return_state=True, return_sequences=True, dropout=0.4)
encoder_outputs, state_h, state_c= encoder_lstm3(encoder_output2)

# 디코더
decoder_inputs = Input(shape=(None,))
dec_emb_layer = Embedding(tar_vocab, embedding_dim)
dec_emb = dec_emb_layer(decoder_inputs)
decoder_lstm = LSTM(hidden_size, return_sequences=True, return_state=True, dropout=0.4)
decoder_outputs, _, _ = decoder_lstm(dec_emb, initial_state=[state_h, state_c])

decoder_softmax_layer = Dense(tar_vocab, activation='softmax')
decoder_softmax_outputs = decoder_softmax_layer(decoder_outputs)

# model
model = Model([encoder_inputs, decoder_inputs], decoder_softmax_outputs)
model.summary()

"""# The attention model"""

from tensorflow.keras.layers import AdditiveAttention

# 어텐션 함수
attn_layer = AdditiveAttention(name='attention_layer')
attn_out = attn_layer([decoder_outputs, encoder_outputs])
decoder_concat_input = Concatenate(axis=-1, name='concat_layer')([decoder_outputs, attn_out])
decoder_softmax_layer = Dense(tar_vocab, activation='softmax')
decoder_softmax_outputs = decoder_softmax_layer(decoder_concat_input)

# model
model = Model([encoder_inputs, decoder_inputs], decoder_softmax_outputs)
model.summary()

"""# Training"""

from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.callbacks import EarlyStopping

model.compile(optimizer='rmsprop', loss='sparse_categorical_crossentropy')
es = EarlyStopping(monitor='val_loss', patience=2, verbose=1)
history = model.fit(
    x=[encoder_input_train, decoder_input_train],
    y=decoder_target_train,
    validation_data=([encoder_input_test, decoder_input_test], decoder_target_test),
    batch_size=5,
    callbacks=[es],
    epochs=50
)

plt.plot(history.history['loss'], label='Training_loss')
plt.plot(history.history['val_loss'], label='Validation_loss')
plt.legend()
plt.show()

src_index_to_word = src_tokenizer.index_word
tar_word_to_index = tar_tokenizer.word_index
tar_index_to_word = tar_tokenizer.index_word

# 인코더 설계
encoder_model = Model(inputs=encoder_inputs, outputs=[encoder_outputs, state_h, state_c])
decoder_state_input_h = Input(shape=(hidden_size,))
decoder_state_input_c = Input(shape=(hidden_size,))
dec_emb2 = dec_emb_layer(decoder_inputs)
decoder_outputs2, state_h2, state_c2 = decoder_lstm(dec_emb2, initial_state=[decoder_state_input_h, decoder_state_input_c])

# 어텐션 함수
decoder_hidden_state_input = Input(shape=(dialogue_max_len, hidden_size))
attn_out_inf = attn_layer([decoder_outputs2, decoder_hidden_state_input])
decoder_inf_concat = Concatenate(axis=-1, name='concat')([decoder_outputs2, attn_out_inf])
decoder_outputs2 = decoder_softmax_layer(decoder_inf_concat)

# 디코더 모델
decoder_model = Model(
    [decoder_inputs] + [decoder_hidden_state_input,decoder_state_input_h, decoder_state_input_c],
    [decoder_outputs2] + [state_h2, state_c2])

def decode_sequence(input_seq):
    e_out, e_h, e_c = encoder_model.predict(input_seq)

    target_seq = np.zeros((1,1))
    target_seq[0, 0] = tar_word_to_index['sostoken']

    stop_condition = False
    decoded_sentence = ''
    while not stop_condition:

        output_tokens, h, c = decoder_model.predict([target_seq] + [e_out, e_h, e_c])
        sampled_token_index = np.argmax(output_tokens[0, -1, :])
        sampled_token = tar_index_to_word[sampled_token_index]

        if (sampled_token!='eostoken'):
            decoded_sentence += ' '+sampled_token

        if (sampled_token == 'eostoken'  or len(decoded_sentence.split()) >= (summary_max_len-1)):
            stop_condition = True

        target_seq = np.zeros((1,1))
        target_seq[0, 0] = sampled_token_index

        e_h, e_c = h, c

    return decoded_sentence

def seq2text(input_seq):
    temp=''
    for i in input_seq:
        if (i!=0):
            temp = temp + src_index_to_word[i]+' '
    return temp

def seq2summary(input_seq):
    temp=''
    for i in input_seq:
        if ((i!=0 and i!=tar_word_to_index['sostoken']) and i!=tar_word_to_index['eostoken']):
            temp = temp + tar_index_to_word[i] + ' '
    return temp

for i in range(0, 3):
    print("원문 :", seq2text(encoder_input_test[i]))
    print("실제 요약 :", seq2summary(decoder_input_test[i]))
    print("예측 요약 :", decode_sequence(encoder_input_test[i].reshape(1, dialogue_max_len)))
    print("-"*117)

data.head()

